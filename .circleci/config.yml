version: 2.1
jobs:
  build_debian:
    machine:
      image: ubuntu-2004:current
    parameters:
      docker_image:
        type: string
      wget_arguments:
        type: string
        default: ""
      installer_arguments:
        type: string
        default: ""
      # We run it before running any commands on image
      prepare_command:
        type: string
        default: "true"
      # We run it before running any commands during preparation phase for systemd enabled Docker container
      systemd_prepare_command:
        type: string
        default: "true"
      # We need it as official upstream packages use another path
      fastnetmon_daemon_path:
        type: string
        default: "/usr/bin/fastnetmon"
      resource_class:
        type: string
        default: medium
      installer_file_name:
        type: string
        default: installer
    resource_class: << parameters.resource_class >>
    steps:
      # Prepare image with systemd enabled
      - run: echo -e "FROM << parameters.docker_image >>\n"                          > Dockerfile
      - run: echo -e "ENV DEBIAN_FRONTEND noninteractive\n"                          >> Dockerfile 
      - run: echo -e "RUN << parameters.systemd_prepare_command >>\n"                >> Dockerfile
      - run: echo -e "RUN apt-get update; apt-get install -y systemd systemd-sysv\n" >> Dockerfile
      - run: echo -e "CMD [\"/lib/systemd/systemd\"]"                                >> Dockerfile
      - run: cat Dockerfile
      - run: cat Dockerfile | sudo docker build --tag debian_systemd -
      - run:
          name: "Deploy new systemd enabled image"
          command: sudo docker run -d -v /sys/fs/cgroup/:/sys/fs/cgroup:ro --privileged --cap-add SYS_ADMIN  --name linux_systemd_container debian_systemd /lib/systemd/systemd
      - run: sudo docker ps
      - run: << parameters.prepare_command >>
      - run: sudo docker exec -it linux_systemd_container apt-get update
      - run: sudo docker exec -it linux_systemd_container apt-get install -y --force-yes wget
      - run: sudo docker exec -it linux_systemd_container wget << parameters.wget_arguments >> https://install.fastnetmon.com/<< parameters.installer_file_name >>?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: sudo docker exec -it linux_systemd_container chmod +x installer
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_community_edition << parameters.installer_arguments >>
      - run: sudo docker exec -it linux_systemd_container ldd << parameters.fastnetmon_daemon_path >> 
      - run: sudo docker exec -it linux_systemd_container systemctl status fastnetmon --no-pager
      - run: sudo docker exec -it linux_systemd_container ldd /usr/bin/fastnetmon_client
      - run: sudo docker exec -it linux_systemd_container ldd /usr/bin/fastnetmon_api_client
      - run: sudo docker exec -it linux_systemd_container << parameters.fastnetmon_daemon_path >> --configuration_check
      - run: sudo docker exec -it linux_systemd_container /usr/bin/fastnetmon_client --help
  build_debian_upstream:
    machine:
      image: ubuntu-2004:current
    parameters:
      docker_image:
        type: string
    steps:
      - run:
          name: "Prepare image with systemd enabled"
          command: echo -e "FROM << parameters.docker_image >>\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update; apt-get install -y systemd systemd-sysv; \nCMD [\"/lib/systemd/systemd\"]" | sudo docker build --tag debian_systemd -
      - run:
          name: "Deploy new systemd enabled image"
          command: sudo docker run -d -v /sys/fs/cgroup/:/sys/fs/cgroup:ro --privileged --cap-add SYS_ADMIN  --name linux_systemd_container debian_systemd /lib/systemd/systemd
      - run: sudo docker ps
      - run: sudo docker exec -it linux_systemd_container apt-get update
      - run: sudo docker exec -it linux_systemd_container apt-get install -y fastnetmon
      - run: sudo docker exec -it linux_systemd_container systemctl start fastnetmon
      - run: sudo docker exec -it linux_systemd_container ldd /usr/sbin/fastnetmon
      - run: sudo docker exec -it linux_systemd_container systemctl status fastnetmon --no-pager
      - run: sudo docker exec -it linux_systemd_container ldd /usr/bin/fastnetmon_client
      - run: sudo docker exec -it linux_systemd_container /usr/sbin/fastnetmon --configuration_check
      - run: sudo docker exec -it linux_systemd_container /usr/bin/fastnetmon_client --help
      - run: sudo docker exec --env -it linux_systemd_container ldd /usr/bin/fastnetmon_api_client
  build_debian_bullseye_backports:
    machine:
      image: ubuntu-2004:current
    parameters:
      docker_image:
        type: string
    steps:
      - run:
          name: "Prepare image with systemd enabled"
          command: echo -e "FROM << parameters.docker_image >>\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update; apt-get install -y systemd systemd-sysv; \nCMD [\"/lib/systemd/systemd\"]" | sudo docker build --tag debian_systemd -
      - run:
          name: "Deploy new systemd enabled image"
          command: sudo docker run -d -v /sys/fs/cgroup/:/sys/fs/cgroup:ro --privileged --cap-add SYS_ADMIN  --name linux_systemd_container debian_systemd /lib/systemd/systemd
      - run: sudo docker ps
      - run: echo "deb http://deb.debian.org/debian bullseye-backports main" | sudo docker exec -i linux_systemd_container tee /etc/apt/sources.list.d/backports.list
      - run: sudo docker exec -it linux_systemd_container apt-get update
      - run: sudo docker exec -it linux_systemd_container apt-get install -y fastnetmon
      - run: sudo docker exec -it linux_systemd_container systemctl start fastnetmon
      - run: sudo docker exec -it linux_systemd_container ldd /usr/sbin/fastnetmon
      - run: sudo docker exec -it linux_systemd_container systemctl status fastnetmon --no-pager
      - run: sudo docker exec -it linux_systemd_container ldd /usr/bin/fastnetmon_client
      - run: sudo docker exec -it linux_systemd_container /usr/sbin/fastnetmon --configuration_check
      - run: sudo docker exec -it linux_systemd_container /usr/bin/fastnetmon_client --help
  build_ubuntu_1404:
    docker:
      - image: ubuntu:trusty
    steps:
      - run: apt-get update
      - run: apt-get install -y wget
      - run: wget https://install.fastnetmon.com/installer?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: chmod +x installer
      - run: ./installer -install_community_edition
      - store_artifacts:
          path: /tmp/fastnetmon_install.log
      - run: ldd /usr/bin/fastnetmon
      - run: ldd /usr/bin/fastnetmon_client
      - run: ldd /usr/bin/fastnetmon_api_client
      - run: /usr/bin/fastnetmon --configuration_check
      - run: /usr/bin/fastnetmon_client --help

  debian10_upgrade_from_repo_version:
    docker:
      - image: debian:buster
    steps:
      - run: apt-get update
      - run: apt-get install -y fastnetmon apt-utils
      - run: apt-get install -y wget
      - run: wget https://install.fastnetmon.com/installer?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: chmod +x installer
      - run: ./installer -install_community_edition
      - store_artifacts:
          path: /tmp/fastnetmon_install.log
      - run: ldd /usr/bin/fastnetmon
      - run: ldd /usr/bin/fastnetmon_client
      - run: ldd /usr/bin/fastnetmon_api_client
      - run: /usr/bin/fastnetmon --configuration_check
      - run: /usr/bin/fastnetmon_client --help
      - run: dpkg -l |grep fastnetmon
  build_centos:
    machine:
      image: ubuntu-2004:current
    parameters:
      docker_image:
        type: string
      wget_arguments:
        type: string
        default: ""
      installer_arguments:
        type: string
        default: ""
      resource_class:
        type: string
        default: medium
      installer_file_name:
        type: string
        default: installer
    resource_class: << parameters.resource_class >>
    steps:
      - run: sudo docker run -d -v /sys/fs/cgroup/:/sys/fs/cgroup:ro --privileged --cap-add SYS_ADMIN  --name linux_systemd_container << parameters.docker_image >> /sbin/init
      - run: sudo docker exec --env -it linux_systemd_container yum install -y wget
      - run: sudo docker exec --env -it linux_systemd_container wget << parameters.wget_arguments >> https://install.fastnetmon.com/<< parameters.installer_file_name >>?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: sudo docker exec --env -it linux_systemd_container chmod +x installer
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_community_edition << parameters.installer_arguments >>
      - run: sudo docker exec --env -it linux_systemd_container systemctl status fastnetmon --no-pager
      - run: sudo docker exec --env -it linux_systemd_container ldd /usr/bin/fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container ldd /usr/bin/fastnetmon_client
      - run: sudo docker exec --env -it linux_systemd_container ldd /usr/bin/fastnetmon_api_client
      - run: sudo docker exec --env -it linux_systemd_container /usr/bin/fastnetmon --configuration_check
      - run: sudo docker exec --env -it linux_systemd_container /usr/bin/fastnetmon_client --help
  centos6:
    docker:
      - image: centos:centos6
    steps:
      - run: sed -i '/mirrorlist/d' /etc/yum.repos.d/CentOS-Base.repo
      - run: sed -i 's/#baseurl/baseurl/' /etc/yum.repos.d/CentOS-Base.repo
      - run: sed -i 's/mirror.centos.org/vault.centos.org/' /etc/yum.repos.d/CentOS-Base.repo
      - run: yum install -y wget
      - run: wget https://install.fastnetmon.com/installer?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: chmod +x installer
      - run: ./installer -install_community_edition
      - store_artifacts:
          path: /tmp/fastnetmon_install.log
      - run: ldd /opt/fastnetmon/fastnetmon
      - run: ldd /opt/fastnetmon/fastnetmon_client
      - run: ldd /opt/fastnetmon/fastnetmon_api_client
      - run: /opt/fastnetmon/fastnetmon --configuration_check
      - run: /opt/fastnetmon/fastnetmon_client --help
  build_fedora:
    machine:
      image: ubuntu-2004:current
    parameters:
      docker_image:
        type: string
    steps:
      - run:
          name: "Prepare image with systemd enabled"
          command: echo -e "FROM << parameters.docker_image >>\nRUN dnf install -y systemd; \nCMD [\"/lib/systemd/systemd\"]" | sudo docker build --tag fedora_systemd - 
      - run:
          name: "Start Docker with systemd enabled in container"
          command: sudo docker run -d -v /sys/fs/cgroup/:/sys/fs/cgroup:ro --privileged --cap-add SYS_ADMIN --name linux_systemd_container fedora_systemd /sbin/init
      - run: sudo docker ps
      - run: sudo docker exec -it linux_systemd_container systemctl status --no-pager
      - run: sudo docker exec -it linux_systemd_container dnf clean all
      - run: sudo docker exec -it linux_systemd_container dnf install -y fastnetmon
      - run: sudo docker exec -it linux_systemd_container systemctl enable fastnetmon
      - run: sudo docker exec -it linux_systemd_container systemctl start fastnetmon
      - run: sudo docker exec -it linux_systemd_container systemctl status fastnetmon --no-pager 
      - run: sudo docker exec -it linux_systemd_container ldd /usr/sbin/fastnetmon
      - run: sudo docker exec -it linux_systemd_container ldd /usr/bin/fastnetmon_client
      - run: sudo docker exec -it linux_systemd_container ldd /usr/bin/fastnetmon_api_client
      - run: sudo docker exec -it linux_systemd_container /usr/sbin/fastnetmon --configuration_check
      - run: sudo docker exec -it linux_systemd_container /usr/bin/fastnetmon_client --help
  build_centos_epel:
    machine:
      image: ubuntu-2004:current
    parameters:
      docker_image:
        type: string
    steps:
      - run: sudo docker run -d -v /sys/fs/cgroup/:/sys/fs/cgroup:ro --privileged --cap-add SYS_ADMIN  --name linux_systemd_container << parameters.docker_image >> /sbin/init
      - run: sudo docker exec --env -it linux_systemd_container dnf install -y dnf-plugins-core
      - run: sudo docker exec --env -it linux_systemd_container dnf config-manager --set-enabled crb
      - run: sudo docker exec --env -it linux_systemd_container dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm 
      - run: sudo docker exec --env -it linux_systemd_container dnf install -y fastnetmon 
      - run: sudo docker exec -it linux_systemd_container systemctl enable fastnetmon
      - run: sudo docker exec -it linux_systemd_container systemctl start fastnetmon
      - run: sudo docker exec -it linux_systemd_container systemctl status fastnetmon --no-pager
      - run: sudo docker exec -it linux_systemd_container ldd /usr/sbin/fastnetmon
      - run: sudo docker exec -it linux_systemd_container ldd /usr/bin/fastnetmon_client
      - run: sudo docker exec -it linux_systemd_container ldd /usr/bin/fastnetmon_api_client
      - run: sudo docker exec -it linux_systemd_container /usr/sbin/fastnetmon --configuration_check
      - run: sudo docker exec -it linux_systemd_container /usr/bin/fastnetmon_client --help

# Declare jobs we will run for each commit and nightly
common_jobs: &common_jobs
    # We do not produce latest packages for it
    - build_debian:
        name: "Debian 8"
        docker_image: debian:jessie
        wget_arguments: ""
        # Packages for jessie were removed from normal Ubuntu repositories and we need to change paths to archive
        prepare_command: echo -e "deb http://archive.debian.org/debian/ jessie contrib main non-free\ndeb http://archive.debian.org/debian-security/ jessie/updates main contrib non-free" | sudo docker exec -i linux_systemd_container tee /etc/apt/sources.list
    - build_debian:
        name: "Debian 9"
        docker_image: debian:stretch
        # Packages for stretch were removed from normal Ubuntu repositories and we need to change paths to archive
        prepare_command: echo -e "deb http://archive.debian.org/debian/ stretch contrib main non-free\ndeb http://archive.debian.org/debian-security/ stretch/updates main contrib non-free" | sudo docker exec -i linux_systemd_container tee /etc/apt/sources.list
        systemd_prepare_command: echo 'deb http://archive.debian.org/debian/ stretch contrib main non-free' | tee /etc/apt/sources.list; echo 'deb http://archive.debian.org/debian-security/ stretch/updates main contrib non-free' | tee  /etc/apt/sources.list.d/updates.list
    - build_debian:
        name: "Debian 10"
        docker_image: debian:buster
    - build_debian:
        name: "Debian 11"
        docker_image: debian:bullseye
    - build_debian:
        name: "Debian 12"
        docker_image: debian:bookworm
    - build_debian:
        name: "Debian 9 dev"
        docker_image: debian:stretch
        installer_arguments: "-developer_version"
    - build_debian:
        name: "Debian 10 dev"
        docker_image: debian:buster
        installer_arguments: "-developer_version"
    - build_debian:
        name: "Debian 11 dev"
        docker_image: debian:bullseye
        installer_arguments: "-developer_version"
    - build_debian:
        name: "Debian 11 dev ARM64"
        docker_image: debian:bullseye
        installer_arguments: "-developer_version"
        resource_class: "arm.large"
        installer_file_name: "installer_arm64"
    - build_debian:
        name: "Debian 12 dev"
        docker_image: debian:bookworm
        installer_arguments: "-developer_version"
    - build_debian:
        name: "Debian 12 dev ARM64"
        docker_image: debian:bookworm
        installer_arguments: "-developer_version"
        resource_class: "arm.large"
        installer_file_name: "installer_arm64"
    # We do not produce latest packages for it
    - build_ubuntu_1404:
        name: "Ubuntu 14.04"
    - build_debian:
        name: "Ubuntu 16.04"
        docker_image: ubuntu:xenial
    - build_debian:
        name: "Ubuntu 18.04"
        docker_image: ubuntu:bionic
    - build_debian:
        name: "Ubuntu 20.04"
        docker_image: ubuntu:focal
    - build_debian:
        name: "Ubuntu 22.04"
        docker_image: ubuntu:jammy
    - build_debian:
        name: "Ubuntu 22.10"
        docker_image: ubuntu:kinetic
        fastnetmon_daemon_path: "/usr/sbin/fastnetmon"
    - build_debian:
        name: "Ubuntu 16.04 dev"
        docker_image: ubuntu:xenial
        installer_arguments: "-developer_version"
    - build_debian:
        name: "Ubuntu 18.04 dev"
        docker_image: ubuntu:bionic
        installer_arguments: "-developer_version"
    - build_debian:
        name: "Ubuntu 20.04 dev"
        docker_image: ubuntu:focal
        installer_arguments: "-developer_version"
    - build_debian:
        name: "Ubuntu 20.04 dev ARM64"
        docker_image: ubuntu:focal
        installer_arguments: "-developer_version"
        resource_class: "arm.large"
        installer_file_name: "installer_arm64"
    - build_debian:
        name: "Ubuntu 22.04 dev"
        docker_image: ubuntu:jammy
        installer_arguments: "-developer_version"
    - build_debian:
        name: "Ubuntu 22.04 dev ARM64"
        docker_image: ubuntu:jammy
        installer_arguments: "-developer_version"
        resource_class: "arm.large"
        installer_file_name: "installer_arm64"
    - build_debian:
        name: "Ubuntu 22.10 dev"
        docker_image: ubuntu:kinetic
        installer_arguments: "-developer_version"
        fastnetmon_daemon_path: "/usr/sbin/fastnetmon"
    # We do not produce latest packages for it
    - centos6
    - build_centos:
        name: "CentOS 7"
        docker_image: centos:centos7
        wget_arguments: ""
    - build_centos:
        name: "CentOS 8"
        docker_image: almalinux:8
    - build_centos:
        name: "CentOS 9"
        docker_image: almalinux:9
    - build_centos:
        name: "CentOS 7 dev"
        docker_image: centos:centos7
        wget_arguments: ""
        installer_arguments: "-developer_version"
    - build_centos:
        name: "CentOS 8 dev"
        docker_image: almalinux:8
        installer_arguments: "-developer_version"
    - build_centos:
        name: "CentOS 8 dev ARM64"
        docker_image: almalinux:8
        installer_arguments: "-developer_version"
        resource_class: "arm.large"
        installer_file_name: "installer_arm64"
    - build_centos:
        name: "CentOS 9 dev"
        docker_image: almalinux:9
        installer_arguments: "-developer_version"
    - build_centos:
        name: "CentOS 9 dev ARM64"
        docker_image: almalinux:9
        installer_arguments: "-developer_version"
        resource_class: "arm.large"
        installer_file_name: "installer_arm64"
    - debian10_upgrade_from_repo_version
    - build_debian_upstream:
        name: "Debian Sid Upstream"
        docker_image: debian:sid
    - build_debian_bullseye_backports:
        name: "Debian 11 backports"
        docker_image: debian:bullseye
    - build_debian:
        name: "Kali Linux Rolling"
        docker_image: kalilinux/kali-rolling
    - build_fedora:
        name: "Fedora 36 upstream"
        docker_image: fedora:36
    - build_fedora:
        name: "Fedora 37 upstream"
        docker_image: fedora:37
    - build_fedora:
        name: "Fedora Rawhide upstream"
        docker_image: fedora:rawhide
    - build_centos_epel:
        name: "CentOS 9 upstream EPEL"
        docker_image: almalinux:9

# We have two different workflows to trigger same tasks on commit and nightly
workflows:
  version: 2
  all_distros_nightly:
    jobs:
      *common_jobs
    triggers:
      - schedule:
          cron: "30 2 * * *"
          filters:
            branches:
              only:
                - master
  all_distros:
    jobs:
      *common_jobs

